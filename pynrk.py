__author__ = 'user'

import urllib2
from xml.etree import ElementTree
from weathermodel import WeatherModel
from forecastmodel import ForeceastModel
import dateutil.parser

# Public: A class that gets the weather data from yr.no based on a geoname
#
# geoname - the geoname string separated with "/". e.g.
# "Finland/Western_Finland/Turku"
#
# Examples
#
# 	weather = yr("Finland/Western_Finland/Turku")
class YR:

    def __init__(self, geoname, date, fetch=True):
        yr_base_url = "http://www.yr.no/place/"
        yr_end_url  = "/forecast.xml"

        if fetch:
            self.weather = self.get_weather(yr_base_url+geoname+yr_end_url, date)

    # Private: Fetches the weather data for the given geoname
    #
    # url - the url to fetch the weather from, generated by __init__
    #
    # Examples
    #
    # self.get_weather("http://www.yr.no/place/Finland/Western_Finland/Turku/forecast.xml")
    #
    # Returns an array of weather maps
    def get_weather(self, url, date):
        p = urllib2.urlopen(url).read()
        return self.parse_xml(p, date)

    # Private: Parses url data to a structure

    @staticmethod
    def parse_xml(data, date):
        tree = ElementTree.fromstring(data)
        forecast_elem = tree.find("forecast")
        tabular_elem = forecast_elem.find("tabular")
        weathermodel = WeatherModel()
        weathermodel.sun_rise = tree.find("sun").attrib["rise"]
        weathermodel.sun_set = tree.find("sun").attrib["set"]

        for forecast in tabular_elem:
            startDate = dateutil.parser.parse(forecast.attrib["from"]).date()
            fixedDate = dateutil.parser.parse(date).date()
            if startDate == fixedDate:
                forecastModel = ForeceastModel()
                forecastModel.start_time = dateutil.parser.parse(forecast.attrib["from"]).time()
                forecastModel.end_time = dateutil.parser.parse(forecast.attrib["to"]).time()
                forecastModel.period_time = forecast.attrib["period"]
                forecastModel.icon_nr = forecast.find("symbol").attrib["number"]
                forecastModel.weather_description = forecast.find("symbol").attrib["name"]
                forecastModel.precipitation = forecast.find("precipitation").attrib
                forecastModel.temperature = forecast.find("temperature").attrib
                forecastModel.pressure = forecast.find("pressure").attrib
                forecastModel.wind_direction = forecast.find("windDirection").attrib
                forecastModel.wind_speed = forecast.find("windSpeed").attrib
                weathermodel.forecastmodel.append(forecastModel)
        return weathermodel
